{
  "title": "One Weekend with Rust 🦀 Did it Really Make Me Fearless?",
  "date": "March 6, 2025",
  "category": "Programming Languages",
  "readTime": "9 min read",
  "image": "https://cdn.prod.website-files.com/61d2c808f50b08ee42c1c477/675698322890728b617211b9_AD_4nXc88HcQbdENqj7gqxwNgTq6GU8S7iRTCHODuGGzRGYzA3Pn26xGvjZqOrRXDPesyGq3seKo5LuVwLjt5rTIEsA6o5M5HOZMadbdSy38RKjq7hDbFa9IsW63k7CrnLYq4Kf6wBM4.png",
  "excerpt": "Rust promised me 'fearless concurrency' and safety like no other language. So I decided to spend a weekend with it. Spoiler: the compiler yelled at me a lot, but I weirdly enjoyed it 😅.",
  "featured": true,
  "content": "<p>Alright friends, confession time. I’ve been flirting with the idea of learning <strong>Rust</strong> for ages. Every other week I see a meme about how the compiler is strict, how the borrow checker is scarier than your high school math teacher, or how once you go Rust, you never go back. So last weekend I decided: enough lurking, let’s actually try it. 🦀</p>\n\n<img src=\"https://rustacean.net/assets/rustacean-flat-happy.png\" alt=\"Rust logo\" style=\"width:120px; margin:20px auto; display:block;\" />\n\n<h2>Day 1: Installing Rust and Fighting Cargo</h2>\n<p>I started by installing Rust using <code>rustup</code>. To my surprise, it was ridiculously simple. Like, suspiciously simple. After dealing with JVM configs and Docker images in my day job, this felt like cheating 😅. Then I met <code>cargo</code>, Rust’s package manager, which honestly felt like npm but without the existential dread.</p>\n\n<p>First program? The classic <code>Hello, world!</code>. That worked instantly. Confidence was sky high. Then I tried something slightly more complex: reading from a file. That’s when the compiler gave me my first big slap on the wrist 🖐️. Apparently, handling errors in Rust isn’t optional. No more sweeping them under the rug. I had to actually <em>think</em> about every possible failure. Annoying at first, but also kind of refreshing.</p>\n\n<h2>Day 2: The Borrow Checker Saga</h2>\n<p>Okay, let’s talk about <strong>the borrow checker</strong>. I’d heard the legends. I thought I was prepared. I was not. 🙃</p>\n\n<p>I wrote some code that tried to mutate a vector while iterating over it. The compiler basically said: <em>“Nope. You can’t do that. I’m saving you from yourself.”</em></p>\n\n<img src=\"https://i.programmerhumor.io/2025/06/086632d66dca7c33dd1f0cba3e27fcc63624f2148a15f0121b0fbc5be4b42eaa.jpeg\" alt=\"Ferris crab yelling 'does not compile'\" style=\"max-width:100%; margin:20px auto; display:block;\" />\n\n<p>At first, I felt like throwing my laptop out the window. But then I realized what was happening: Rust was forcing me to think clearly about <em>who owns what</em>, when things are borrowed, and when they go out of scope. Honestly, after years of debugging weird memory leaks in other languages, this made me weirdly happy. It’s strict, but for a good reason.</p>\n\n<h2>Concurrency Experiments</h2>\n<p>Now, this was the real reason I wanted to try Rust. Everyone keeps saying Rust makes concurrency <em>fearless</em>. I wrote a small program with multiple threads incrementing a counter. In other languages, I’d just cross my fingers and hope it doesn’t explode. In Rust, the compiler again stopped me from doing silly things.</p>\n\n<p>I had to wrap my counter in <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>, which at first felt like juggling three chainsaws at once. But once it compiled (finally), the code was rock solid. No data races. No weird undefined behavior. Just clean, safe concurrency. 🤯</p>\n\n<h2>Would I Use Rust Again?</h2>\n<p>Short answer: Yes. Long answer: Yessssssss. 🔥</p>\n\n<p>Rust is not the easiest language to pick up for a weekend. The compiler is demanding, the borrow checker will test your patience, and you’ll probably Google <code>rust ownership explained</code> a dozen times. But here’s the thing: once your code compiles, it usually <em>just works</em>. That feeling of safety is addictive.</p>\n\n<p>I won’t ditch my usual stacks for Rust tomorrow, but I can see myself using it for system-level work, performance-critical services, or even some side projects just for fun. Plus, the community is super welcoming, and the mascot (Ferris 🦀) is honestly adorable.</p>\n\n<h2>Final Thoughts</h2>\n<p>If you’re curious about Rust, give it a weekend. Don’t try to master it in one go, just tinker. Build a small CLI tool, mess around with threads, or even just print some stuff. The compiler will yell at you, but you’ll thank it later. Promise. 😉</p>\n\n<img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpQNjINF4KlIZmzTvz97shZGGu3pcX_w3r1Q&s\" alt=\"Rust coding\" style=\"max-width:100%; margin:20px auto; display:block;\" />\n\n<p>So yeah, Rust didn’t make me fearless overnight. But it did make me more thoughtful, and a little more excited about programming again. And that’s worth a few compiler errors. 💻✨</p>"
}
