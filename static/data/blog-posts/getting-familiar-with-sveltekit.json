{
    "title": "From Distributed Systems to SvelteKit: Why I’m Loving This Framework 🚀",
    "date": "March 5, 2025",
    "category": "Web Development",
    "readTime": "7 min read",
    "image": "https://miro.medium.com/v2/resize:fit:1200/format:webp/1*G0aCeRoVw_8rF4iAfDdc0w.png",
    "excerpt": "As someone who has wrangled Kafka clusters, JVM bottlenecks, and live systems handling 50K+ users, building apps with SvelteKit feels like a breath of fresh air 😌. Let’s dive into why I think SvelteKit is an underrated gem for developers.",
    "featured": true,
    "content": "<img src=\"https://svelte.dev/blog/sveltekit-1.0/hero.png\" alt=\"SvelteKit\" />\n<p>Hey folks 👋, I’m Vansh – a backend engineer who has spent the last few years deep in the world of <strong>Java, Spring Boot, Kafka, Redis</strong> and all the other backend goodies. I’ve built systems that handle <em>tens of thousands of users in real-time</em> 🚦, optimized microservices to boost throughput by <strong>4x</strong>, and even shaved off <strong>60% infra costs</strong> with some clever engineering magic ✨.</p>\n<p>So when I started tinkering with <strong>SvelteKit</strong> for my personal projects (like my portfolio), my first thought was: <em>“Wait, why is frontend suddenly... fun?”</em> 😅</p>\n\n<h2>Why SvelteKit Feels Different</h2>\n<p>Here’s the thing – most frontend frameworks feel like onboarding to Kubernetes. You read the docs, you squint, and suddenly you’re maintaining 300 configs. SvelteKit though? It’s like grabbing a coffee ☕, writing some code, and things just... work.</p>\n<ul>\n<li><strong>Performance-first</strong>: Coming from backend optimization, I appreciate how Svelte compiles to efficient JavaScript. No virtual DOM overhead, just pure speed. ⚡</li>\n<li><strong>Feels like writing normal code</strong>: HTML, CSS, JS – all in one file. Clean and simple. It’s like writing <em>pseudo-code</em> that actually runs.</li>\n<li><strong>SSR out of the box</strong>: Backend-me claps 👏 whenever I see server-side rendering done right. SEO + speed = win-win.</li>\n<li><strong>Routing that makes sense</strong>: Your folder structure <em>is</em> your routing. Finally, no more staring at massive router configs at 2 AM.</li>\n</ul>\n\n<h2>Getting Started is Stupidly Simple 😎</h2>\n<pre><code>npm create svelte@latest my-app</code></pre>\n<p>That’s it. You’ll be up and running faster than it takes Kafka to rebalance a partition (and that’s saying something 😉).</p>\n\n<h2>Where It Shines for Someone Like Me</h2>\n<p>As a backend engineer, I used to dread frontend work. Now, I use SvelteKit to:</p>\n<ul>\n<li>Build quick dashboards for testing my distributed systems 🛠️</li>\n<li>Create prototypes for AI-driven apps I’m experimenting with 🤖</li>\n<li>Keep my <a href=\"https://vps-portfolio.netlify.app\" target=\"_blank\">portfolio</a> sleek and performant ✨</li>\n</ul>\n\n<h2>Final Thoughts</h2>\n<p>SvelteKit won’t replace your favorite backend framework (don’t worry Spring Boot, I still love you ❤️). But if you’re like me – juggling backend, AI experiments, and side projects – it’s a lightweight way to build UIs that don’t get in your way.</p>\n<p>So yeah, 10/10 would recommend. If nothing else, try it out for your next hackathon project. Who knows, maybe you’ll end up winning like I did 🏆😉.</p>\n\n<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--I8xQJ7KZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/sveltejs/branding/master/svelte-logo.svg\" alt=\"Svelte Logo\" style=\"width:120px; margin-top:20px;\" />\n"
  }
  